name: Back-End CI & CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build jar and Push Docker Image at Docker hub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set up yml file
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application-prod.yml
        env:
          spring.datasource.url: ${{ secrets.MYSQL_URL }}
          spring.datasource.username: ${{ secrets.MYSQL_USERNAME }}
          spring.datasource.password: ${{ secrets.MYSQL_PASSWORD }}
          spring.cloud.aws.credentials.accessKey: ${{ secrets.AWS_ACCESS_KEY }}
          spring.cloud.aws.credentials.secretKey: ${{ secrets.AWS_SECRET_KEY }}
          spring.cloud.aws.region.static: ${{ secrets.AWS_REGION }}
          spring.cloud.aws.s3.bucket: ${{ secrets.BUCKET_NAME }}
          kakao.api.key: ${{ secrets.KAKAO_API_KEY }}
          kakao.api.base-url: ${{ secrets.KAKAO_BASE_URL}}

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test -i --no-daemon -Dspring.profiles.active=prod

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/anyonetoo-server:latest .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/anyonetoo-server:latest

  deploy:
    name: Deploy to remote EC2 Server
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Executing remote SSH using SSH Key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/anyonetoo-server:latest
            
            if [ "$(docker ps -aq -f name=anyonetoo-server)" ]
            then
              echo "[ spring is running ]"
              docker stop anyonetoo-server
              docker rm anyonetoo-server
            else
              echo "[ spring is not running ]"
            fi
            
            docker run -d --name anyonetoo-server -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/anyonetoo-server
